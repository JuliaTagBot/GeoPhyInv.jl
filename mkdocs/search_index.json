{
    "docs": [
        {
            "location": "/", 
            "text": "There are various modules in this toolbox. Most of the times, each module has  a type variable definition and methods  that either modify the type variable or construct them.\n\n\n\n\nGrids\n\n\n#\n\n\nSIT.Grid.M1D\n \n \nType\n.\n\n\nData type to represent 1D grid.\n\n\nFields\n\n\n\n\nx\n : values\n\n\nnx\n : number of samples\n\n\n\u03b4x\n : sampling interval\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M1D\n \n \nMethod\n.\n\n\nConstruct 1-D grid based on nx or \u03b4x\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M2D\n \n \nType\n.\n\n\nData type to represent 2D grid.\n\n\nFields\n\n\n\n\nx\n : horizontal values\n\n\nz\n : vertical values\n\n\nnx\n : number of samples in horizontal direction\n\n\nnz\n : number of samples in vertical direction\n\n\n\u03b4x\n : sampling interval in horizontal direction\n\n\n\u03b4z\n : sampling interval in vertical direction\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M1D_isequal\n \n \nMethod\n.\n\n\nLogical operation for \nM1D\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M1D_npow2\n \n \nMethod\n.\n\n\noutput an npow2grid of either time or frequency\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M1D_npow2_tf\n \n \nMethod\n.\n\n\nconvertion between time and frequency npow2 grids\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M1D_resamp\n \n \nMethod\n.\n\n\n1-D grid with a different sampling interval\n\n\n\n\nNot yet implemented for npow2 grids\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M1D_truncate\n \n \nMethod\n.\n\n\n1-D grid which is has a different size\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M2D_border\n \n \nMethod\n.\n\n\nReturn the X and Z positions of the border of mgrid\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M2D_isequal\n \n \nMethod\n.\n\n\nLogical operation for \nM2D\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M2D_pad_trun\n \n \nMethod\n.\n\n\nExtend M2D by its npml grid points on all sides\n\n\nsource\n\n\n#\n\n\nSIT.Grid.M2D_resamp\n \n \nMethod\n.\n\n\n2-D grid with a different sampling interval\n\n\nsource\n\n\n\n\nSource Wavelets\n\n\n#\n\n\nSIT.Wavelets.ormsby\n \n \nMethod\n.\n\n\normbsy wavelet\n\n\nsource\n\n\n#\n\n\nSIT.Wavelets.ricker\n \n \nMethod\n.\n\n\nGenerate a Ricker Wavelet\n\n\nArguments\n\n\n\n\nfqdom\n: dominant frequency\n\n\ntgrid\n: time-domain grid\n\n\ntpeak\n: the peak of the ricker in time\n\n\n``\n\n\n\n\nsource\n\n\n\n\nSource and Receiver Coupling\n\n\n#\n\n\nSIT.Coupling.TD_delta\n \n \nMethod\n.\n\n\nReturn delta functions\n\n\nsource\n\n\n\n\nAcquisition\n\n\n#\n\n\nSIT.Acquisition.Geom\n \n \nType\n.\n\n\nAcquisiton of supersources, sources and receivers. Each supersource has multiple sources that are  injected (active) simultaneously. Each supersource  has a set of receivers that  record waves. \n\n\nFields\n\n\n\n\nsx::Vector{Vector{Float64,1},1}\n : $x$ positions of sources\n\n\nsz::Vector{Vector{Float64,1},1}\n : $z$ positions of sources\n\n\nrx::Vector{Vector{Float64,1},1}\n : $x$ positions of receivers\n\n\nrz::Vector{Vector{Float64,1},1}\n : $z$ positions of receivers\n\n\nnss::Int64\n : number of supersources\n\n\nns::Vector{Int64,1}\n : number of sources for every supersources\n\n\nnr::Vector{Int64,1}\n : number of receivers for every supersource\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Src\n \n \nType\n.\n\n\nData type for the sources used.\n\n\nFields\n\n\n\n\nnss::Int64\n : number of supersources\n\n\nns::Array{Int64}\n : number of sources for each supersource\n\n\nnfield::Int64\n : number of fields\n\n\nwav::Array{Float64}\n : wavelets in time domain\n\n\ntgrid::Grid.M1D\n : time grid\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Geom_boundary\n \n \nMethod\n.\n\n\nModify input \nGeom\n such that the output has either sources or receivers on the boundary of  \nmgrid\n.\n\n\nArguments\n\n\n\n\nacqgeom::Geom\n : input geometry\n\n\nmgrid::Grid.M2D\n : to determine the boundary\n\n\nattrib::Symbol\n : either \n:srcborder\n or \n:recborder\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Geom_circ\n \n \nMethod\n.\n\n\nCircular acquisition. The sources and receivers can also be placed on a circle of radius \nrad\n. The origin of the circle is at \nloc\n.  This geometry is unrealistic, but useful for testing. Receivers are placed such that the limits  of the angular offset are given by \n\u03b8lim\n\n\nArguments\n\n\nnss::Int64=10\n : number of supersources \nnr::Int64=10\n : number receivers for each super source \nloc::Vector{Float64}=[0.,0.]\n : location of origin \nrad::Float64=100.\n : radius \n\u03b8lim::Vector{Float64}=[0.,2*pi]\n : range of angular offset between source and receiver\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Geom_find\n \n \nMethod\n.\n\n\nGiven receiver positions \nrpos\n and \nrpos0\n. Returns an array Int indices of the dimension of number of supersources with \ntrue\n at indices, if the waves due to that particular source are  recorded.\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Geom_fixed\n \n \nFunction\n.\n\n\nReturn fixed spread acquisition geometry depending  on either horizontal or vertical array It has only one source for every supersource\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Geom_get\n \n \nMethod\n.\n\n\nReturn some derived fields of \nGeom\n\n\nOutputs\n\n\nattrib=:uspos\n : a tuple of x and z positions of unique sources \nattrib=:urpos\n : a tuple of x and z position of unique receivers \nattrib=:nus\n : number of unique source positions \nattrib=:nur\n : number of unique source positions\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Geom_getvec\n \n \nMethod\n.\n\n\nreturn a vector of the order \n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Src_fixed\n \n \nMethod\n.\n\n\nConstructor for \nSrc\n data type. repeat same source wavelet for all sources and supersources\n\n\nArguments\n\n\n\n\nnss::Int64\n : number of supersources\n\n\nns::Int64\n : number of sources\n\n\nwav::Array{Float64}\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Src_getvec\n \n \nMethod\n.\n\n\nreturn a vector of the order \n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Src_tr\n \n \nMethod\n.\n\n\nFunction that returns Src after time reversal\n\n\nsource\n\n\n#\n\n\nSIT.Acquisition.Src_uspos\n \n \nMethod\n.\n\n\nPad \nSrc\n  tgrids should be same in all Src\n\n\nsource\n\n\n\n\nSpline Representations\n\n\n#\n\n\nSIT.Interpolation.indminn\n \n \nMethod\n.\n\n\nTODO:\n\n\n\n\nadd dimension checks to interp_spray!\n\n\nimplement cubic\n\n\n\n\nReference: https://www.ibiblio.org/e-notes/Splines/bezier.html\n\n\nReturn n indices in order Cannot find a julia method which does, this. If a faster method is found, replace it later.\n\n\nsource\n\n\n#\n\n\nSIT.Interpolation.interp_B1_1D\n \n \nMethod\n.\n\n\nthis subroutine interpolates or sprays bilinearly [one is adjoint of another] interpolation returns y using y1, y2 spraying returns y1, y2 using y\n\n\n                    +                      \n                    |                      \ny1= f(x1)           |      y2= f(x2)   \n  +-----------------x--------+             \n             y=f(x) |                      \n                    +\n\n\n\n\n\nbilinear interpolation Reference: http://www.ajdesigner.com/phpinterpolation/bilinear_interpolation_equation.php\n\n\nsource\n\n\n#\n\n\nSIT.Interpolation.interp_B2_1D\n \n \nMethod\n.\n\n\nthis subroutine interpolates or sprays  using cubic bspline interpolation returns y using y1, y2, y3, y4 spraying returns y1, y2, y3, y4 using y\n\n\n                   +                      \n                   |\n\n\n\n\n\ny1      y2          |    y3       y4      +\u2013\u2013\u2013-+\u2013\u2013\u2013\u2013-x\u2013\u2013+\u2013\u2013\u2013\u2013+                              y=f(x) |                                              +                      \n\n\nsource\n\n\n\n\nModels\n\n\n#\n\n\nSIT.Models.Seismic\n \n \nType\n.\n\n\nData type fo represent a seismic model.\n\n\nFields\n\n\n\n\nvp0\n :\n\n\nvs0\n :\n\n\n\u03c10\n :\n\n\n\u03c7vp\n :\n\n\n\u03c7vs\n :\n\n\n\u03c7\u03c1\n :\n\n\nmgrid\n :\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_addon\n \n \nMethod\n.\n\n\nAdd features to a model.\n\n\nArguments\n\n\n\n\nmod::Seismic\n : model that is modified\n\n\n\n\nKeyword Arguments\n\n\n\n\ncirc_loc::Vector{Float64}=nothing\n : location of center of perturbation\n\n\ncirc_rad::Float64=0.0\n : radius of circular perturbation\n\n\ncirc_pert::Float64=0.1\n : perturbation inside a circle\n\n\nrect_loc::Array{Float64}=nothing\n : rectangle location\n\n\nrect_pert::Float64=0.1\n : perturbation in a rectangle\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_chainrule!\n \n \nFunction\n.\n\n\nUse chain rule to output gradients with  respect to \u03c7vp and \u03c7\u03c1 from  gradients  with respect to KI and \u03c1I.\n\n\nArguments\n\n\n\n\nmod::Seismic\n : model required for chain rule\n\n\ngKI\n : gradient of an objective function with respect to KI\n\n\ng\u03c1I\n : gradient of an objective function with respect to \u03c1I\n\n\n\n\nflag::Int64=1\n :\n\n\n\n\n=1\n updates \ngmod\n using \ng1\n and \ng2\n\n\n=-1\n updates \ng1\n and \ng2\n using \ngmod\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_get\n \n \nMethod\n.\n\n\nGet other dependent model parameters of a seismic model that are not present in \nSeismic\n.\n\n\n\n\n:\u03c1I\n : inverse of density\n\n\n:Zp\n : P-wave impedance\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_interp_spray!\n \n \nMethod\n.\n\n\nfunction to resample in the model domain\n\n\nArguments\n\n\n\n\nmod::Seismic\n : model\n\n\nmodi::Seismic\n : model after interpolation\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_isequal\n \n \nMethod\n.\n\n\nLogical operation for \nSeismic\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_issimilar\n \n \nMethod\n.\n\n\nLogical operation for \nSeismic\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_issimilar\n \n \nMethod\n.\n\n\nLogical operation for \nSeismic\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_pad_trun\n \n \nMethod\n.\n\n\nExtend a seismic model into PML layers\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_reparameterize!\n \n \nFunction\n.\n\n\nRe-parameterization routine  that modifies the fields  \n\u03c7vp\n and \n\u03c7\u03c1\n of an input seismic model using two input vectors.\n\n\nArguments\n\n\n\n\nmod::Seismic\n : to be updated\n\n\nx1::Array{Float64,2}\n : contrast of inverse bulk modulus\n\n\nx2::Array{Float64,2}\n : contrast of inverse density\n\n\nattribs:::Vector{Symbol}\n : [:\u03c7KI, :\u03c7\u03c1I]\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Models.Seismic_zeros\n \n \nMethod\n.\n\n\nReturn \nSeismic\n with zeros everywhere; this method is used for preallocation.\n\n\nArguments\n\n\n\n\nmgrid::Grid.M2D\n :\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Models.pad_trun\n \n \nFunction\n.\n\n\nExtend a model on all four sides\n\n\nsource\n\n\n#\n\n\nSIT.Models.\u03c7\n \n \nFunction\n.\n\n\nReturn dimensionless contrast model parameter using the reference value.\n\n\nArguments\n\n\n\n\nmod::Array{Float64}\n : subsurface parameter\n\n\nmod0::Float64\n : reference value\n\n\nflag::Int64=1\n :\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Models.\u03c7g\n \n \nFunction\n.\n\n\nGradients Return contrast model parameter using the reference value.\n\n\nsource\n\n\n\n\nData\n\n\n#\n\n\nSIT.Data.TD\n \n \nType\n.\n\n\nTime domain representation of Seismic Data. TODO: Also include acqsrc?\n\n\nFields\n\n\n\n\nd::Array{Array{Float64,2},2}\n : data\n\n\nnfield::Int64\n : number of components at each receiver\n\n\ntgrid::Grid.M1D\n : grid to represent time\n\n\nacqgeom::Acquisition.Geom\n : geometry used to generate the data\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Data.TD_dot\n \n \nMethod\n.\n\n\nReturns dot product of the data\n\n\nsource\n\n\n#\n\n\nSIT.Data.TD_iszero\n \n \nMethod\n.\n\n\nCheck if zeros\n\n\nsource\n\n\n#\n\n\nSIT.Data.TD_normalize\n \n \nMethod\n.\n\n\nnormalize time-domain seismic data\n\n\nsource\n\n\n#\n\n\nSIT.Data.TD_resamp\n \n \nMethod\n.\n\n\nfunction to resample data in time domain\n\n\nArguments\n\n\n\n\ndata\n : input data of type \nTD\n\n\ntgrid\n : resampling in time according to this time grid\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Data.TD_urpos\n \n \nMethod\n.\n\n\nConstruct TD using data at all the unique receiver positions for all supersources.\n\n\nsource\n\n\n#\n\n\nSIT.Data.TD_zeros\n \n \nMethod\n.\n\n\nReturn zeros\n\n\nsource\n\n\n#\n\n\nSIT.Data.TDcoup\n \n \nMethod\n.\n\n\nApply SR to TD\n\n\nsource\n\n\n\n\nData Misfits\n\n\n#\n\n\nSIT.Misfits.TD\n \n \nMethod\n.\n\n\nInput the obeserved and modelled data to output the misfit and the adjoint sources\n\n\nsource\n\n\n#\n\n\nSIT.Misfits.error_after_scaling\n \n \nMethod\n.\n\n\nNormalized least-squares error between two vectors after  estimating a scalar that best fits on to another. Return misfit and \u03b1 such that \u03b1x-y is minimum. Normalization is done with respect to the  norm of y.\n\n\nsource\n\n\n\n\nGallery\n\n\n#\n\n\nSIT.Gallery.Geom\n \n \nMethod\n.\n\n\nGallery of acquisition geometries \nGeom\n based on input \nM2D\n.\n\n\nArguments\n\n\n\n\nattrib::Symbol\n :\n\n\n\n\nOutputs\n\n\n\n\nattrib=:oneonev\n : one source at (xmin, mean(z)) and one receiver at (xmax, mean(z))\n\n\nattrib=:twotwov\n : two vertical wells, two sources at xmin and two receivers at xmax\n\n\nattrib=:tentenv\n : two vertical wells, two sources at xmin and two receivers at xmax\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Gallery.Geom\n \n \nMethod\n.\n\n\nGallery of acquisition geometries \nGeom\n.\n\n\nArguments\n\n\n\n\nattrib::Symbol\n :\n\n\n\n\nOutputs\n\n\n\n\nattrib=:acou_homo1\n : a simple one source and one receiver configuration\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Gallery.M1D\n \n \nMethod\n.\n\n\nGallery of \nM1D\n grids.\n\n\nArguments\n\n\n\n\nattrib::Symbol\n :\n\n\n\n\nOutputs\n\n\n\n\nattrib=:acou_homo1\n : a time grid for with 1000 samples; maximum time is 2 s\n\n\nattrib=:npow2samp1\n : a sample npow2 grid with 16 samples\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Gallery.M2D\n \n \nMethod\n.\n\n\nGallery of \nM2D\n grids.\n\n\nArguments\n\n\n\n\nattrib::Symbol\n :\n\n\n\n\nOutputs\n\n\n\n\nattrib=:acou_homo1\n : a square grid for with 201 samples in each dimension, with 50 PML\n\n\n\n\n    points; both X and Z vary from -1000 to 1000.\n\n\n\n\n\n\n\nattrib=:acou_homo2\n : a square grid for with 51 samples in each dimension, with 50 PML\n\n\n\n\n    points; both X and Z vary from -1000 to 1000.\n\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Gallery.Seismic\n \n \nMethod\n.\n\n\nGallery of \nSeismic\n models.\n\n\nArguments\n\n\n\n\nattrib::Symbol\n :\n\n\n\n\nOutputs\n\n\n\n\nattrib=:acou_homo1\n : an homogeneous acoustic model with \nvp0=2000\n and \n\u03c10=2000\n\n\nattrib=:seismic_marmousi2\n : marmousi model with lower resolution; ideal for surface seismic experiments\n\n\nattrib=:seismic_marmousi2_high_res\n : marmousi model high resolution; slower to load\n\n\nattrib=:seismic_marmousi2_box1\n : 1x1 kilometer box of marmousi model; ideal for crosswell, borehole seismic studies\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Gallery.Src\n \n \nFunction\n.\n\n\nGallery of source signals \nSrc\n.\n\n\nArguments\n\n\n\n\nattrib::Symbol\n :\n\n\nnss::Int64=1\n : number of supersources\n\n\n\n\nOutputs\n\n\n\n\nattrib=:acou_homo1\n :\n\n\n\n\nsource\n\n\n\n\nFinite-difference Time-domain Modelling\n\n\n#\n\n\nSIT.Fdtd.mod\n \n \nMethod\n.\n\n\nAs forward modeling method, the  finite-difference method is employed.  It uses a discrete version of the two-dimensional isotropic acoustic wave equation. As shown in   Figure~ef{fdshmesh_acou}, a staggered-grid mesh is used \n\n\nKeyword Arguments\n\n\n\n\njobname\n : dominant frequency\n\n\nnpropwav\n : number of wavefields propagating independently in the same medium time-domain grid\n\n\nmodel\n : Seismic Model\n\n\nmodel_pert\n : Perturbed Seismic Model used for Born modeling\n\n\ntgridmod\n : time grid for modeling\n\n\ntgrid\n : time grid for data output\n\n\nrecv_nfield::Int64=1\n : number of fields that receivers record\n\n\nprop_flags\n: flags that combine propagating wavefields\n\n\nboundary_save_flag::Bool=false\n : save final state variables and the boundary conditions for later use\n\n\nboundary_in::Any=nothing\n : input final state variables and boundary\n\n\n\n\nExample\n\n\njulia\n \nrecords\n,\n \nboundary_save\n  \n=\n \nmod\n();\n\n\n\n\n\n\nCredits: Pawan Bharadwaj, 2017\n\n\nsource\n\n\n\n\nInversion\n\n\n#\n\n\nSIT.Inversion.Param\n \n \nType\n.\n\n\nInversion Parameters, i.e., factors that  are fixed throughout the inversion\n\n\nFields\n\n\n\n\nmgrid::Grid.M2D\n : modelling grid\n\n\nigrid::Grid.M2D\n : inversion grid\n\n\nacqsrc::Acquisition.Src\n : base source wavelet for modelling data\n\n\nacqgeom::Acquisition.Geom\n : acquisition geometry\n\n\ntgrid::Grid.M1D\n :\n\n\nattrib_mod::Symbol\n\n\nmodel0\n : background velocity model (only used during Born modeling and inversion)\n\n\nparameterization\n : a vector of Symbols specifying parameterization of the inversion vector\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Inversion.AdjGeom\n \n \nMethod\n.\n\n\nModify the input acquisition geometry  such that the adjoint source time functions can  be propagated from the receiver positions. The number of supersources will remain the same. All the recievers will be fired as simultaneous sources.\n\n\nsource\n\n\n#\n\n\nSIT.Inversion.Coupling_x!\n \n \nMethod\n.\n\n\nConvert \nSeismic\n model to x and vice versa\n\n\nsource\n\n\n#\n\n\nSIT.Inversion.Seismic_gx!\n \n \nMethod\n.\n\n\nConvert gradient vector to \nSeismic\n type and vice versa This will be different from the previous one, once  the parameterizations come in\n\n\n\n\ngmodm::Models.Seismic\n : gradient model on the modelling grid\n\n\nmodm::Models.Seismic\n : model on the modelling grid\n\n\ngmodi::Models.Seismic\n : gradient model on the inversion grid\n\n\nmodi::Models.Seismic\n : model on the inversion grid\n\n\ngx::Vector{Float64}\n : gradient vector\n\n\npa::Param\n :\n\n\n\n\nflag::Int64\n :\n\n\n\n\n=1\n update the vector \ngx\n using \ngmod\n\n\n=-1\n update gmod\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Inversion.Seismic_x!\n \n \nMethod\n.\n\n\nConvert \nSeismic\n model to x and vice versa\n\n\n\n\nmodm::Models.Seismic\n : seismic model on modelling grid (input zeros to not use it)\n\n\nmodi::Models.Seismic\n : seismic model on inversion grid\n\n\nx::Vector{Float64}\n : inversion vector\n\n\npa::Param\n : fwi parameters\n\n\n\n\nflag::Int64\n : \n\n\n\n\n=1\n converts either modm or modi to x\n\n\n=-1\n updates both modm and modi using x\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Inversion.func\n \n \nMethod\n.\n\n\nReturn functional and gradient of the CLS objective \n\n\nsource\n\n\n#\n\n\nSIT.Inversion.func_Coupling\n \n \nMethod\n.\n\n\nReturn functional and gradient of the CLS objective \n\n\nsource\n\n\n#\n\n\nSIT.Inversion.fwi_ninv\n \n \nMethod\n.\n\n\nReturn the number of inversion variables \nParam\n\n\nsource\n\n\n#\n\n\nSIT.Inversion.srcf\n \n \nMethod\n.\n\n\nSRCF\n\n\nArguments\n\n\nsource\n\n\n#\n\n\nSIT.Inversion.update_buffer!\n \n \nFunction\n.\n\n\nUpdate the buffer, which consists of the modelled data and boundary values for adjoint calculation.\n\n\nArguments\n\n\n\n\nx::Vector{Float64}\n : inversion variable\n\n\nlast_x::Vector{Float64}\n : buffer is only updated when x!=last_x, and modified such that last_x=x\n\n\npa::Param\n : parameters that are constant during the inversion\n\n\nmodm::Models.Seismic\n :\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Inversion.xfwi\n \n \nMethod\n.\n\n\nFWI using Optim\n\n\nArguments\n\n\n\n\ndobs::Data.TD=Data.TD_zeros(1,pa.tgrid,pa.acqgeom)\n : input observed data\n\n\n\n\nsource\n\n\n\n\nInterferometry\n\n\n#\n\n\nSIT.Interferometry.TD_virtual_diff\n \n \nMethod\n.\n\n\nenhance diffractions in the \nTD\n\n\nKeyword Arguments\n\n\n\u03bbdom::Float64=0.0\n : distance between receivers must be greater than twice central wavelength, 2*\u03bbdom (Shapiro 2005) \ntlag::Float64=data.tgrid.x[end]-data.tgrid.x[1]\n : maximum lag time in the output traces \n\n\nsource\n\n\n\n\nIndependent Component Analysis for Convolutive Mixtures\n\n\n#\n\n\nSIT.CICA.bica\n \n \nMethod\n.\n\n\nPerforms ICA for convolutive mixtures.\n\n\nArguments\n\n\n\n\nmagic_recv\n: a receiver index, where deblending is performed\n\n\nrecv_n\n: total number of receivers\n\n\nsrc_n\n: total number of sources\n\n\ngrid\n: \nM1D\n grid\n\n\nnband\n: number of frequency bins, where ICA is performed\n\n\nnsubfac\n: overlap factor (testing)\n\n\nX\n: blended data\n\n\n\n\nOutput\n\n\n\n\nY\n: deblended data at \nmagic_recv\n\n\n\n\nsource\n\n\n#\n\n\nSIT.CICA.exact_freq_mixing\n \n \nMethod\n.\n\n\nConvolutive mixing in the frequency domain.\n\n\nArguments\n\n\n\n\nAs\n:\n\n\nAb\n:\n\n\nB\n:\n\n\nS\n:\n\n\nfgrid\n:\n\n\n\n\nOutputs\n\n\n\n\nD\n\n\nd\n\n\nDs\n\n\nds\n\n\nDb\n\n\ndb\n\n\n\n\nsource\n\n\n\n\nPlots\n\n\n#\n\n\nSIT.Plots.printfig\n \n \nMethod\n.\n\n\nsave current fig using matlab2tikz\n\n\nsource\n\n\n#\n\n\nSIT.Plots.Geom\n \n \nMethod\n.\n\n\nPlot acquisition geometry \nAcquisition.Geom\n on  and model grid \nM2D\n.\n\n\nattrib::Symbol=:unique\n : default; plots unique source and receiver positions \n\n\nsource\n\n\n#\n\n\nSIT.Plots.Seismic\n \n \nMethod\n.\n\n\nPlot seismic model\n\n\nArguments\n\n\n\n\nmodel::Models.Seismic\n =\n\n\n\n\nKeyword Arguments\n\n\n\n\nxlim::Vector{Float64}=[model.mgrid.x[1],model.mgrid.x[end]]\n :\n\n\nzlim::Vector{Float64}=[model.mgrid.z[1],model.mgrid.z[end]]\n :\n\n\n\n\nsource\n\n\n#\n\n\nSIT.Plots.Src\n \n \nMethod\n.\n\n\nPlot acqsrc\n\n\nsource\n\n\n#\n\n\nSIT.Plots.TD\n \n \nMethod\n.\n\n\nPlot time-domain data of type \nData.TD\n\n\nArguments\n\n\n\n\ntd::Data.TD\n :\n\n\n\n\nKeyword Arguments\n\n\n\n\nssvec::Vector{Int64}=[1]\n : supersource vector to be plotted\n\n\nfieldvec::Vector{Int64}=[1]\n : field vector to be plotted\n\n\ntr_flag::Bool=false\n : plot time-reversed data when true\n\n\nattrib::Symbol=:wav\n : specify type of plot\n\n\n\n\nsource\n\n\n%## Another Section %\n@contents %Pages = [ %    \"modeling/page1.md\"  %    ] %Depth = 2 %\n %  %\n@contents %Pages = [ %    \"tutorials/page1.md\", %    ] %Depth = 2 %\n\n\n\n\nIndex\n\n\n\n\nSIT.Acquisition.Geom\n\n\nSIT.Acquisition.Src\n\n\nSIT.Data.TD\n\n\nSIT.Grid.M1D\n\n\nSIT.Grid.M1D\n\n\nSIT.Grid.M2D\n\n\nSIT.Inversion.Param\n\n\nSIT.Models.Seismic\n\n\nSIT.Acquisition.Geom_boundary\n\n\nSIT.Acquisition.Geom_circ\n\n\nSIT.Acquisition.Geom_find\n\n\nSIT.Acquisition.Geom_fixed\n\n\nSIT.Acquisition.Geom_get\n\n\nSIT.Acquisition.Geom_getvec\n\n\nSIT.Acquisition.Src_fixed\n\n\nSIT.Acquisition.Src_getvec\n\n\nSIT.Acquisition.Src_tr\n\n\nSIT.Acquisition.Src_uspos\n\n\nSIT.CICA.bica\n\n\nSIT.CICA.exact_freq_mixing\n\n\nSIT.Coupling.TD_delta\n\n\nSIT.Data.TD_dot\n\n\nSIT.Data.TD_iszero\n\n\nSIT.Data.TD_normalize\n\n\nSIT.Data.TD_resamp\n\n\nSIT.Data.TD_urpos\n\n\nSIT.Data.TD_zeros\n\n\nSIT.Data.TDcoup\n\n\nSIT.Fdtd.mod\n\n\nSIT.Gallery.Geom\n\n\nSIT.Gallery.Geom\n\n\nSIT.Gallery.M1D\n\n\nSIT.Gallery.M2D\n\n\nSIT.Gallery.Seismic\n\n\nSIT.Gallery.Src\n\n\nSIT.Grid.M1D_isequal\n\n\nSIT.Grid.M1D_npow2\n\n\nSIT.Grid.M1D_npow2_tf\n\n\nSIT.Grid.M1D_resamp\n\n\nSIT.Grid.M1D_truncate\n\n\nSIT.Grid.M2D_border\n\n\nSIT.Grid.M2D_isequal\n\n\nSIT.Grid.M2D_pad_trun\n\n\nSIT.Grid.M2D_resamp\n\n\nSIT.Interferometry.TD_virtual_diff\n\n\nSIT.Interpolation.indminn\n\n\nSIT.Interpolation.interp_B1_1D\n\n\nSIT.Interpolation.interp_B2_1D\n\n\nSIT.Inversion.AdjGeom\n\n\nSIT.Inversion.Coupling_x!\n\n\nSIT.Inversion.Seismic_gx!\n\n\nSIT.Inversion.Seismic_x!\n\n\nSIT.Inversion.func\n\n\nSIT.Inversion.func_Coupling\n\n\nSIT.Inversion.fwi_ninv\n\n\nSIT.Inversion.srcf\n\n\nSIT.Inversion.update_buffer!\n\n\nSIT.Inversion.xfwi\n\n\nSIT.Misfits.TD\n\n\nSIT.Misfits.error_after_scaling\n\n\nSIT.Models.Seismic_addon\n\n\nSIT.Models.Seismic_chainrule!\n\n\nSIT.Models.Seismic_get\n\n\nSIT.Models.Seismic_interp_spray!\n\n\nSIT.Models.Seismic_isequal\n\n\nSIT.Models.Seismic_issimilar\n\n\nSIT.Models.Seismic_issimilar\n\n\nSIT.Models.Seismic_pad_trun\n\n\nSIT.Models.Seismic_reparameterize!\n\n\nSIT.Models.Seismic_zeros\n\n\nSIT.Models.pad_trun\n\n\nSIT.Models.\u03c7\n\n\nSIT.Models.\u03c7g\n\n\nSIT.Plots.Geom\n\n\nSIT.Plots.Seismic\n\n\nSIT.Plots.Src\n\n\nSIT.Plots.TD\n\n\nSIT.Plots.printfig\n\n\nSIT.Wavelets.ormsby\n\n\nSIT.Wavelets.ricker", 
            "title": "Home"
        }, 
        {
            "location": "/#grids", 
            "text": "#  SIT.Grid.M1D     Type .  Data type to represent 1D grid.  Fields   x  : values  nx  : number of samples  \u03b4x  : sampling interval   source  #  SIT.Grid.M1D     Method .  Construct 1-D grid based on nx or \u03b4x  source  #  SIT.Grid.M2D     Type .  Data type to represent 2D grid.  Fields   x  : horizontal values  z  : vertical values  nx  : number of samples in horizontal direction  nz  : number of samples in vertical direction  \u03b4x  : sampling interval in horizontal direction  \u03b4z  : sampling interval in vertical direction   source  #  SIT.Grid.M1D_isequal     Method .  Logical operation for  M1D  source  #  SIT.Grid.M1D_npow2     Method .  output an npow2grid of either time or frequency  source  #  SIT.Grid.M1D_npow2_tf     Method .  convertion between time and frequency npow2 grids  source  #  SIT.Grid.M1D_resamp     Method .  1-D grid with a different sampling interval   Not yet implemented for npow2 grids   source  #  SIT.Grid.M1D_truncate     Method .  1-D grid which is has a different size  source  #  SIT.Grid.M2D_border     Method .  Return the X and Z positions of the border of mgrid  source  #  SIT.Grid.M2D_isequal     Method .  Logical operation for  M2D  source  #  SIT.Grid.M2D_pad_trun     Method .  Extend M2D by its npml grid points on all sides  source  #  SIT.Grid.M2D_resamp     Method .  2-D grid with a different sampling interval  source", 
            "title": "Grids"
        }, 
        {
            "location": "/#source-wavelets", 
            "text": "#  SIT.Wavelets.ormsby     Method .  ormbsy wavelet  source  #  SIT.Wavelets.ricker     Method .  Generate a Ricker Wavelet  Arguments   fqdom : dominant frequency  tgrid : time-domain grid  tpeak : the peak of the ricker in time  ``   source", 
            "title": "Source Wavelets"
        }, 
        {
            "location": "/#source-and-receiver-coupling", 
            "text": "#  SIT.Coupling.TD_delta     Method .  Return delta functions  source", 
            "title": "Source and Receiver Coupling"
        }, 
        {
            "location": "/#acquisition", 
            "text": "#  SIT.Acquisition.Geom     Type .  Acquisiton of supersources, sources and receivers. Each supersource has multiple sources that are  injected (active) simultaneously. Each supersource  has a set of receivers that  record waves.   Fields   sx::Vector{Vector{Float64,1},1}  : $x$ positions of sources  sz::Vector{Vector{Float64,1},1}  : $z$ positions of sources  rx::Vector{Vector{Float64,1},1}  : $x$ positions of receivers  rz::Vector{Vector{Float64,1},1}  : $z$ positions of receivers  nss::Int64  : number of supersources  ns::Vector{Int64,1}  : number of sources for every supersources  nr::Vector{Int64,1}  : number of receivers for every supersource   source  #  SIT.Acquisition.Src     Type .  Data type for the sources used.  Fields   nss::Int64  : number of supersources  ns::Array{Int64}  : number of sources for each supersource  nfield::Int64  : number of fields  wav::Array{Float64}  : wavelets in time domain  tgrid::Grid.M1D  : time grid   source  #  SIT.Acquisition.Geom_boundary     Method .  Modify input  Geom  such that the output has either sources or receivers on the boundary of   mgrid .  Arguments   acqgeom::Geom  : input geometry  mgrid::Grid.M2D  : to determine the boundary  attrib::Symbol  : either  :srcborder  or  :recborder   source  #  SIT.Acquisition.Geom_circ     Method .  Circular acquisition. The sources and receivers can also be placed on a circle of radius  rad . The origin of the circle is at  loc .  This geometry is unrealistic, but useful for testing. Receivers are placed such that the limits  of the angular offset are given by  \u03b8lim  Arguments  nss::Int64=10  : number of supersources  nr::Int64=10  : number receivers for each super source  loc::Vector{Float64}=[0.,0.]  : location of origin  rad::Float64=100.  : radius  \u03b8lim::Vector{Float64}=[0.,2*pi]  : range of angular offset between source and receiver  source  #  SIT.Acquisition.Geom_find     Method .  Given receiver positions  rpos  and  rpos0 . Returns an array Int indices of the dimension of number of supersources with  true  at indices, if the waves due to that particular source are  recorded.  source  #  SIT.Acquisition.Geom_fixed     Function .  Return fixed spread acquisition geometry depending  on either horizontal or vertical array It has only one source for every supersource  source  #  SIT.Acquisition.Geom_get     Method .  Return some derived fields of  Geom  Outputs  attrib=:uspos  : a tuple of x and z positions of unique sources  attrib=:urpos  : a tuple of x and z position of unique receivers  attrib=:nus  : number of unique source positions  attrib=:nur  : number of unique source positions  source  #  SIT.Acquisition.Geom_getvec     Method .  return a vector of the order   source  #  SIT.Acquisition.Src_fixed     Method .  Constructor for  Src  data type. repeat same source wavelet for all sources and supersources  Arguments   nss::Int64  : number of supersources  ns::Int64  : number of sources  wav::Array{Float64}   source  #  SIT.Acquisition.Src_getvec     Method .  return a vector of the order   source  #  SIT.Acquisition.Src_tr     Method .  Function that returns Src after time reversal  source  #  SIT.Acquisition.Src_uspos     Method .  Pad  Src   tgrids should be same in all Src  source", 
            "title": "Acquisition"
        }, 
        {
            "location": "/#spline-representations", 
            "text": "#  SIT.Interpolation.indminn     Method .  TODO:   add dimension checks to interp_spray!  implement cubic   Reference: https://www.ibiblio.org/e-notes/Splines/bezier.html  Return n indices in order Cannot find a julia method which does, this. If a faster method is found, replace it later.  source  #  SIT.Interpolation.interp_B1_1D     Method .  this subroutine interpolates or sprays bilinearly [one is adjoint of another] interpolation returns y using y1, y2 spraying returns y1, y2 using y                      +                      \n                    |                      \ny1= f(x1)           |      y2= f(x2)   \n  +-----------------x--------+             \n             y=f(x) |                      \n                    +  bilinear interpolation Reference: http://www.ajdesigner.com/phpinterpolation/bilinear_interpolation_equation.php  source  #  SIT.Interpolation.interp_B2_1D     Method .  this subroutine interpolates or sprays  using cubic bspline interpolation returns y using y1, y2, y3, y4 spraying returns y1, y2, y3, y4 using y                     +                      \n                   |  y1      y2          |    y3       y4      +\u2013\u2013\u2013-+\u2013\u2013\u2013\u2013-x\u2013\u2013+\u2013\u2013\u2013\u2013+                              y=f(x) |                                              +                        source", 
            "title": "Spline Representations"
        }, 
        {
            "location": "/#models", 
            "text": "#  SIT.Models.Seismic     Type .  Data type fo represent a seismic model.  Fields   vp0  :  vs0  :  \u03c10  :  \u03c7vp  :  \u03c7vs  :  \u03c7\u03c1  :  mgrid  :   source  #  SIT.Models.Seismic_addon     Method .  Add features to a model.  Arguments   mod::Seismic  : model that is modified   Keyword Arguments   circ_loc::Vector{Float64}=nothing  : location of center of perturbation  circ_rad::Float64=0.0  : radius of circular perturbation  circ_pert::Float64=0.1  : perturbation inside a circle  rect_loc::Array{Float64}=nothing  : rectangle location  rect_pert::Float64=0.1  : perturbation in a rectangle   source  #  SIT.Models.Seismic_chainrule!     Function .  Use chain rule to output gradients with  respect to \u03c7vp and \u03c7\u03c1 from  gradients  with respect to KI and \u03c1I.  Arguments   mod::Seismic  : model required for chain rule  gKI  : gradient of an objective function with respect to KI  g\u03c1I  : gradient of an objective function with respect to \u03c1I   flag::Int64=1  :   =1  updates  gmod  using  g1  and  g2  =-1  updates  g1  and  g2  using  gmod     source  #  SIT.Models.Seismic_get     Method .  Get other dependent model parameters of a seismic model that are not present in  Seismic .   :\u03c1I  : inverse of density  :Zp  : P-wave impedance   source  #  SIT.Models.Seismic_interp_spray!     Method .  function to resample in the model domain  Arguments   mod::Seismic  : model  modi::Seismic  : model after interpolation   source  #  SIT.Models.Seismic_isequal     Method .  Logical operation for  Seismic  source  #  SIT.Models.Seismic_issimilar     Method .  Logical operation for  Seismic  source  #  SIT.Models.Seismic_issimilar     Method .  Logical operation for  Seismic  source  #  SIT.Models.Seismic_pad_trun     Method .  Extend a seismic model into PML layers  source  #  SIT.Models.Seismic_reparameterize!     Function .  Re-parameterization routine  that modifies the fields   \u03c7vp  and  \u03c7\u03c1  of an input seismic model using two input vectors.  Arguments   mod::Seismic  : to be updated  x1::Array{Float64,2}  : contrast of inverse bulk modulus  x2::Array{Float64,2}  : contrast of inverse density  attribs:::Vector{Symbol}  : [:\u03c7KI, :\u03c7\u03c1I]   source  #  SIT.Models.Seismic_zeros     Method .  Return  Seismic  with zeros everywhere; this method is used for preallocation.  Arguments   mgrid::Grid.M2D  :   source  #  SIT.Models.pad_trun     Function .  Extend a model on all four sides  source  #  SIT.Models.\u03c7     Function .  Return dimensionless contrast model parameter using the reference value.  Arguments   mod::Array{Float64}  : subsurface parameter  mod0::Float64  : reference value  flag::Int64=1  :   source  #  SIT.Models.\u03c7g     Function .  Gradients Return contrast model parameter using the reference value.  source", 
            "title": "Models"
        }, 
        {
            "location": "/#data", 
            "text": "#  SIT.Data.TD     Type .  Time domain representation of Seismic Data. TODO: Also include acqsrc?  Fields   d::Array{Array{Float64,2},2}  : data  nfield::Int64  : number of components at each receiver  tgrid::Grid.M1D  : grid to represent time  acqgeom::Acquisition.Geom  : geometry used to generate the data   source  #  SIT.Data.TD_dot     Method .  Returns dot product of the data  source  #  SIT.Data.TD_iszero     Method .  Check if zeros  source  #  SIT.Data.TD_normalize     Method .  normalize time-domain seismic data  source  #  SIT.Data.TD_resamp     Method .  function to resample data in time domain  Arguments   data  : input data of type  TD  tgrid  : resampling in time according to this time grid   source  #  SIT.Data.TD_urpos     Method .  Construct TD using data at all the unique receiver positions for all supersources.  source  #  SIT.Data.TD_zeros     Method .  Return zeros  source  #  SIT.Data.TDcoup     Method .  Apply SR to TD  source", 
            "title": "Data"
        }, 
        {
            "location": "/#data-misfits", 
            "text": "#  SIT.Misfits.TD     Method .  Input the obeserved and modelled data to output the misfit and the adjoint sources  source  #  SIT.Misfits.error_after_scaling     Method .  Normalized least-squares error between two vectors after  estimating a scalar that best fits on to another. Return misfit and \u03b1 such that \u03b1x-y is minimum. Normalization is done with respect to the  norm of y.  source", 
            "title": "Data Misfits"
        }, 
        {
            "location": "/#gallery", 
            "text": "#  SIT.Gallery.Geom     Method .  Gallery of acquisition geometries  Geom  based on input  M2D .  Arguments   attrib::Symbol  :   Outputs   attrib=:oneonev  : one source at (xmin, mean(z)) and one receiver at (xmax, mean(z))  attrib=:twotwov  : two vertical wells, two sources at xmin and two receivers at xmax  attrib=:tentenv  : two vertical wells, two sources at xmin and two receivers at xmax   source  #  SIT.Gallery.Geom     Method .  Gallery of acquisition geometries  Geom .  Arguments   attrib::Symbol  :   Outputs   attrib=:acou_homo1  : a simple one source and one receiver configuration   source  #  SIT.Gallery.M1D     Method .  Gallery of  M1D  grids.  Arguments   attrib::Symbol  :   Outputs   attrib=:acou_homo1  : a time grid for with 1000 samples; maximum time is 2 s  attrib=:npow2samp1  : a sample npow2 grid with 16 samples   source  #  SIT.Gallery.M2D     Method .  Gallery of  M2D  grids.  Arguments   attrib::Symbol  :   Outputs   attrib=:acou_homo1  : a square grid for with 201 samples in each dimension, with 50 PML       points; both X and Z vary from -1000 to 1000.   attrib=:acou_homo2  : a square grid for with 51 samples in each dimension, with 50 PML       points; both X and Z vary from -1000 to 1000.  source  #  SIT.Gallery.Seismic     Method .  Gallery of  Seismic  models.  Arguments   attrib::Symbol  :   Outputs   attrib=:acou_homo1  : an homogeneous acoustic model with  vp0=2000  and  \u03c10=2000  attrib=:seismic_marmousi2  : marmousi model with lower resolution; ideal for surface seismic experiments  attrib=:seismic_marmousi2_high_res  : marmousi model high resolution; slower to load  attrib=:seismic_marmousi2_box1  : 1x1 kilometer box of marmousi model; ideal for crosswell, borehole seismic studies   source  #  SIT.Gallery.Src     Function .  Gallery of source signals  Src .  Arguments   attrib::Symbol  :  nss::Int64=1  : number of supersources   Outputs   attrib=:acou_homo1  :   source", 
            "title": "Gallery"
        }, 
        {
            "location": "/#finite-difference-time-domain-modelling", 
            "text": "#  SIT.Fdtd.mod     Method .  As forward modeling method, the  finite-difference method is employed.  It uses a discrete version of the two-dimensional isotropic acoustic wave equation. As shown in   Figure~ef{fdshmesh_acou}, a staggered-grid mesh is used   Keyword Arguments   jobname  : dominant frequency  npropwav  : number of wavefields propagating independently in the same medium time-domain grid  model  : Seismic Model  model_pert  : Perturbed Seismic Model used for Born modeling  tgridmod  : time grid for modeling  tgrid  : time grid for data output  recv_nfield::Int64=1  : number of fields that receivers record  prop_flags : flags that combine propagating wavefields  boundary_save_flag::Bool=false  : save final state variables and the boundary conditions for later use  boundary_in::Any=nothing  : input final state variables and boundary   Example  julia   records ,   boundary_save    =   mod ();   Credits: Pawan Bharadwaj, 2017  source", 
            "title": "Finite-difference Time-domain Modelling"
        }, 
        {
            "location": "/#inversion", 
            "text": "#  SIT.Inversion.Param     Type .  Inversion Parameters, i.e., factors that  are fixed throughout the inversion  Fields   mgrid::Grid.M2D  : modelling grid  igrid::Grid.M2D  : inversion grid  acqsrc::Acquisition.Src  : base source wavelet for modelling data  acqgeom::Acquisition.Geom  : acquisition geometry  tgrid::Grid.M1D  :  attrib_mod::Symbol  model0  : background velocity model (only used during Born modeling and inversion)  parameterization  : a vector of Symbols specifying parameterization of the inversion vector   source  #  SIT.Inversion.AdjGeom     Method .  Modify the input acquisition geometry  such that the adjoint source time functions can  be propagated from the receiver positions. The number of supersources will remain the same. All the recievers will be fired as simultaneous sources.  source  #  SIT.Inversion.Coupling_x!     Method .  Convert  Seismic  model to x and vice versa  source  #  SIT.Inversion.Seismic_gx!     Method .  Convert gradient vector to  Seismic  type and vice versa This will be different from the previous one, once  the parameterizations come in   gmodm::Models.Seismic  : gradient model on the modelling grid  modm::Models.Seismic  : model on the modelling grid  gmodi::Models.Seismic  : gradient model on the inversion grid  modi::Models.Seismic  : model on the inversion grid  gx::Vector{Float64}  : gradient vector  pa::Param  :   flag::Int64  :   =1  update the vector  gx  using  gmod  =-1  update gmod     source  #  SIT.Inversion.Seismic_x!     Method .  Convert  Seismic  model to x and vice versa   modm::Models.Seismic  : seismic model on modelling grid (input zeros to not use it)  modi::Models.Seismic  : seismic model on inversion grid  x::Vector{Float64}  : inversion vector  pa::Param  : fwi parameters   flag::Int64  :    =1  converts either modm or modi to x  =-1  updates both modm and modi using x     source  #  SIT.Inversion.func     Method .  Return functional and gradient of the CLS objective   source  #  SIT.Inversion.func_Coupling     Method .  Return functional and gradient of the CLS objective   source  #  SIT.Inversion.fwi_ninv     Method .  Return the number of inversion variables  Param  source  #  SIT.Inversion.srcf     Method .  SRCF  Arguments  source  #  SIT.Inversion.update_buffer!     Function .  Update the buffer, which consists of the modelled data and boundary values for adjoint calculation.  Arguments   x::Vector{Float64}  : inversion variable  last_x::Vector{Float64}  : buffer is only updated when x!=last_x, and modified such that last_x=x  pa::Param  : parameters that are constant during the inversion  modm::Models.Seismic  :   source  #  SIT.Inversion.xfwi     Method .  FWI using Optim  Arguments   dobs::Data.TD=Data.TD_zeros(1,pa.tgrid,pa.acqgeom)  : input observed data   source", 
            "title": "Inversion"
        }, 
        {
            "location": "/#interferometry", 
            "text": "#  SIT.Interferometry.TD_virtual_diff     Method .  enhance diffractions in the  TD  Keyword Arguments  \u03bbdom::Float64=0.0  : distance between receivers must be greater than twice central wavelength, 2*\u03bbdom (Shapiro 2005)  tlag::Float64=data.tgrid.x[end]-data.tgrid.x[1]  : maximum lag time in the output traces   source", 
            "title": "Interferometry"
        }, 
        {
            "location": "/#independent-component-analysis-for-convolutive-mixtures", 
            "text": "#  SIT.CICA.bica     Method .  Performs ICA for convolutive mixtures.  Arguments   magic_recv : a receiver index, where deblending is performed  recv_n : total number of receivers  src_n : total number of sources  grid :  M1D  grid  nband : number of frequency bins, where ICA is performed  nsubfac : overlap factor (testing)  X : blended data   Output   Y : deblended data at  magic_recv   source  #  SIT.CICA.exact_freq_mixing     Method .  Convolutive mixing in the frequency domain.  Arguments   As :  Ab :  B :  S :  fgrid :   Outputs   D  d  Ds  ds  Db  db   source", 
            "title": "Independent Component Analysis for Convolutive Mixtures"
        }, 
        {
            "location": "/#plots", 
            "text": "#  SIT.Plots.printfig     Method .  save current fig using matlab2tikz  source  #  SIT.Plots.Geom     Method .  Plot acquisition geometry  Acquisition.Geom  on  and model grid  M2D .  attrib::Symbol=:unique  : default; plots unique source and receiver positions   source  #  SIT.Plots.Seismic     Method .  Plot seismic model  Arguments   model::Models.Seismic  =   Keyword Arguments   xlim::Vector{Float64}=[model.mgrid.x[1],model.mgrid.x[end]]  :  zlim::Vector{Float64}=[model.mgrid.z[1],model.mgrid.z[end]]  :   source  #  SIT.Plots.Src     Method .  Plot acqsrc  source  #  SIT.Plots.TD     Method .  Plot time-domain data of type  Data.TD  Arguments   td::Data.TD  :   Keyword Arguments   ssvec::Vector{Int64}=[1]  : supersource vector to be plotted  fieldvec::Vector{Int64}=[1]  : field vector to be plotted  tr_flag::Bool=false  : plot time-reversed data when true  attrib::Symbol=:wav  : specify type of plot   source  %## Another Section % @contents %Pages = [ %    \"modeling/page1.md\"  %    ] %Depth = 2 %  %  % @contents %Pages = [ %    \"tutorials/page1.md\", %    ] %Depth = 2 %", 
            "title": "Plots"
        }, 
        {
            "location": "/#index", 
            "text": "SIT.Acquisition.Geom  SIT.Acquisition.Src  SIT.Data.TD  SIT.Grid.M1D  SIT.Grid.M1D  SIT.Grid.M2D  SIT.Inversion.Param  SIT.Models.Seismic  SIT.Acquisition.Geom_boundary  SIT.Acquisition.Geom_circ  SIT.Acquisition.Geom_find  SIT.Acquisition.Geom_fixed  SIT.Acquisition.Geom_get  SIT.Acquisition.Geom_getvec  SIT.Acquisition.Src_fixed  SIT.Acquisition.Src_getvec  SIT.Acquisition.Src_tr  SIT.Acquisition.Src_uspos  SIT.CICA.bica  SIT.CICA.exact_freq_mixing  SIT.Coupling.TD_delta  SIT.Data.TD_dot  SIT.Data.TD_iszero  SIT.Data.TD_normalize  SIT.Data.TD_resamp  SIT.Data.TD_urpos  SIT.Data.TD_zeros  SIT.Data.TDcoup  SIT.Fdtd.mod  SIT.Gallery.Geom  SIT.Gallery.Geom  SIT.Gallery.M1D  SIT.Gallery.M2D  SIT.Gallery.Seismic  SIT.Gallery.Src  SIT.Grid.M1D_isequal  SIT.Grid.M1D_npow2  SIT.Grid.M1D_npow2_tf  SIT.Grid.M1D_resamp  SIT.Grid.M1D_truncate  SIT.Grid.M2D_border  SIT.Grid.M2D_isequal  SIT.Grid.M2D_pad_trun  SIT.Grid.M2D_resamp  SIT.Interferometry.TD_virtual_diff  SIT.Interpolation.indminn  SIT.Interpolation.interp_B1_1D  SIT.Interpolation.interp_B2_1D  SIT.Inversion.AdjGeom  SIT.Inversion.Coupling_x!  SIT.Inversion.Seismic_gx!  SIT.Inversion.Seismic_x!  SIT.Inversion.func  SIT.Inversion.func_Coupling  SIT.Inversion.fwi_ninv  SIT.Inversion.srcf  SIT.Inversion.update_buffer!  SIT.Inversion.xfwi  SIT.Misfits.TD  SIT.Misfits.error_after_scaling  SIT.Models.Seismic_addon  SIT.Models.Seismic_chainrule!  SIT.Models.Seismic_get  SIT.Models.Seismic_interp_spray!  SIT.Models.Seismic_isequal  SIT.Models.Seismic_issimilar  SIT.Models.Seismic_issimilar  SIT.Models.Seismic_pad_trun  SIT.Models.Seismic_reparameterize!  SIT.Models.Seismic_zeros  SIT.Models.pad_trun  SIT.Models.\u03c7  SIT.Models.\u03c7g  SIT.Plots.Geom  SIT.Plots.Seismic  SIT.Plots.Src  SIT.Plots.TD  SIT.Plots.printfig  SIT.Wavelets.ormsby  SIT.Wavelets.ricker", 
            "title": "Index"
        }, 
        {
            "location": "/tutorials/page1/", 
            "text": "FFF FF", 
            "title": "Title 1"
        }, 
        {
            "location": "/modeling/page1/", 
            "text": "ff", 
            "title": "Title 1"
        }
    ]
}