{
    "docs": [
        {
            "location": "/",
            "text": "SeismicInversionToolbox\n\n\nThe main tasks of this software are:\n\n\n\n\n\n\nForward problem, where the seismic data are generated \nusing synthetic Earth models and the acquisition parameters \ncorresponding to a seismic experiment.\nForward modeling consists of a finite-difference simulation, followed\nby convolutions in the time domain using the source and\nreceiver filters. The details about our finite-difference \nscheme are given in XXX. \nAnd the filters corresponding to \nsources and receivers are described in XXX.\n\n\n\n\n\n\nCan perform inversion of synthetic scenarios.\nFirst, the seismic data are modeled as in the forward problem. Then the \ndata are used to perform full waveform inversion (FWI). The inverse \nproblem estimates\nthe Earth models and the source and receiver filters \nthat resulted from the data.\nThis task is necessary to test the performance of the inversion algorithm \nin various geological scenarios using different acquisition parameters.\n\n\n\n\n\n\nRead \nthe measured seismic field data and parameters from a seismic experiment \nto perform inversion like in the previous task. \nThe data measured in the field are not in a suitable format \nyet for this software. \nPre-processing is necessary before it can be used as described.\nAlso, the acquisition parameters from the field\nshould be \nconverted to suitable 2-D coordinates as described.\n\n\n\n\n\n\nCoding Conventions\n\n\n\n\n\n\nThis software is organised into various modules.\nEach module has various type definitions and methods declared.\nCommenting is \ndone inside each module file to describe the purpose of the module and its usage.\nMost of the comments in the code are inline with the text in this documentation. \nWithin each module, variable naming is done \nto reduce the effort needed to understand the source code.\nFor example, \n\\code{distance = velocity * time} is prefered over using \n\\code{a = b * c} in most parts of the software.\nThe code inside each method is properly intended using spaces to facilitate \nredability.\nWe followed this documentation \n\n\n\n\n\n\nThe methods ending with \n!\n ideally should not allocate and memory. They are supposed to be fast and iteratively called inside loops.\n\n\n\n\n\n\nInstallation\n\n\nInput and Output Data Format\n\n\nIt is recomended that the \ninput seismic data is \nin the Seismic Unix (SU) format.\nThe SU file should contain all the necessary headers \nrelated to acquisition geometry that will be\ndiscussed in Section~\\ref{sec:acq_geom}.\nMost of the seismic data pre-processing softwares \ngenerate a SEGY file with headers. \nWe can use the following command to \nconvert an example SEGY file, \\fname{exp.sgy}, to SU format. \n\n\nDemos\n\n\nDemos preforming some of the tasks are provided along with the software in \\fname{workdir/xfwi/demos/}.\nAn example parameter file is also provided in Section~\\ref{sec:para_file} of this manual.",
            "title": "Home"
        },
        {
            "location": "/#seismicinversiontoolbox",
            "text": "The main tasks of this software are:    Forward problem, where the seismic data are generated \nusing synthetic Earth models and the acquisition parameters \ncorresponding to a seismic experiment.\nForward modeling consists of a finite-difference simulation, followed\nby convolutions in the time domain using the source and\nreceiver filters. The details about our finite-difference \nscheme are given in XXX. \nAnd the filters corresponding to \nsources and receivers are described in XXX.    Can perform inversion of synthetic scenarios.\nFirst, the seismic data are modeled as in the forward problem. Then the \ndata are used to perform full waveform inversion (FWI). The inverse \nproblem estimates\nthe Earth models and the source and receiver filters \nthat resulted from the data.\nThis task is necessary to test the performance of the inversion algorithm \nin various geological scenarios using different acquisition parameters.    Read \nthe measured seismic field data and parameters from a seismic experiment \nto perform inversion like in the previous task. \nThe data measured in the field are not in a suitable format \nyet for this software. \nPre-processing is necessary before it can be used as described.\nAlso, the acquisition parameters from the field\nshould be \nconverted to suitable 2-D coordinates as described.",
            "title": "SeismicInversionToolbox"
        },
        {
            "location": "/#coding-conventions",
            "text": "This software is organised into various modules.\nEach module has various type definitions and methods declared.\nCommenting is \ndone inside each module file to describe the purpose of the module and its usage.\nMost of the comments in the code are inline with the text in this documentation. \nWithin each module, variable naming is done \nto reduce the effort needed to understand the source code.\nFor example, \n\\code{distance = velocity * time} is prefered over using \n\\code{a = b * c} in most parts of the software.\nThe code inside each method is properly intended using spaces to facilitate \nredability.\nWe followed this documentation     The methods ending with  !  ideally should not allocate and memory. They are supposed to be fast and iteratively called inside loops.",
            "title": "Coding Conventions"
        },
        {
            "location": "/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/#input-and-output-data-format",
            "text": "It is recomended that the \ninput seismic data is \nin the Seismic Unix (SU) format.\nThe SU file should contain all the necessary headers \nrelated to acquisition geometry that will be\ndiscussed in Section~\\ref{sec:acq_geom}.\nMost of the seismic data pre-processing softwares \ngenerate a SEGY file with headers. \nWe can use the following command to \nconvert an example SEGY file, \\fname{exp.sgy}, to SU format.",
            "title": "Input and Output Data Format"
        },
        {
            "location": "/#demos",
            "text": "Demos preforming some of the tasks are provided along with the software in \\fname{workdir/xfwi/demos/}.\nAn example parameter file is also provided in Section~\\ref{sec:para_file} of this manual.",
            "title": "Demos"
        },
        {
            "location": "/reference/",
            "text": "There are various modules in this toolbox.\nMost of the times, each module has \na type variable definition and methods \nthat either modify the type variable or construct them.\n\n\nCoupling\n\n\n```@autodocs\nModules = [JuMIT.Coupling]\nOrder   = [:module, :type, :function]\n\n\n#\n \nAcquisition\n\n\n```@\nautodocs\n\n\nModules\n \n=\n \n[\nJuMIT\n.\nAcquisition\n]\n\n\nOrder\n   \n=\n \n[\n:\nmodule\n,\n \n:\ntype\n,\n \n:\nfunction\n]\n\n\n\n\n\n\nModels\n\n\n```@autodocs\nModules = [JuMIT.Models]\nOrder   = [:module, :type, :function]\n\n\n#\n \nData\n\n\n```@\nautodocs\n\n\nModules\n \n=\n \n[\nJuMIT\n.\nData\n]\n\n\nOrder\n   \n=\n \n[\n:\nmodule\n,\n \n:\ntype\n,\n \n:\nfunction\n]\n\n\n\n\n\n\nGallery\n\n\n```@autodocs\nModules = [JuMIT.Gallery]\nOrder   = [:module, :type, :function]\n\n\n#\n \nFdtd\n\n\n\n```@\nautodocs\n\n\nModules\n \n=\n \n[\nJuMIT\n.\nFdtd\n]\n\n\nOrder\n   \n=\n \n[\n:\nmodule\n,\n \n:\ntype\n,\n \n:\nfunction\n]\n\n\n\n\n\n\nFWI\n\n\n```@autodocs\nModules = [JuMIT.FWI]\nOrder   = [:module, :type, :function]\n\n\n#\n \nInterferometry\n\n\n\n```@\nautodocs\n\n\nModules\n \n=\n \n[\nJuMIT\n.\nInterferometry\n]\n\n\nOrder\n   \n=\n \n[\n:\nmodule\n,\n \n:\ntype\n,\n \n:\nfunction\n]\n\n\n\n\n\n\nPoisson\n\n\n```@autodocs\nModules = [JuMIT.Poisson]\nOrder   = [:module, :type, :function]\n\n\n#\n \nPlots\n\n\n```@\nautodocs\n\n\nModules\n \n=\n \n[\nJuMIT\n.\nPlots\n]\n\n\nOrder\n   \n=\n \n[\n:\nmodule\n,\n \n:\ntype\n,\n \n:\nfunction\n]\n\n\n\n\n\n\nIndex\n\n\n@index",
            "title": "Reference"
        },
        {
            "location": "/reference/#coupling",
            "text": "```@autodocs\nModules = [JuMIT.Coupling]\nOrder   = [:module, :type, :function]  #   Acquisition  ```@ autodocs  Modules   =   [ JuMIT . Acquisition ]  Order     =   [ : module ,   : type ,   : function ]",
            "title": "Coupling"
        },
        {
            "location": "/reference/#models",
            "text": "```@autodocs\nModules = [JuMIT.Models]\nOrder   = [:module, :type, :function]  #   Data  ```@ autodocs  Modules   =   [ JuMIT . Data ]  Order     =   [ : module ,   : type ,   : function ]",
            "title": "Models"
        },
        {
            "location": "/reference/#gallery",
            "text": "```@autodocs\nModules = [JuMIT.Gallery]\nOrder   = [:module, :type, :function]  #   Fdtd  ```@ autodocs  Modules   =   [ JuMIT . Fdtd ]  Order     =   [ : module ,   : type ,   : function ]",
            "title": "Gallery"
        },
        {
            "location": "/reference/#fwi",
            "text": "```@autodocs\nModules = [JuMIT.FWI]\nOrder   = [:module, :type, :function]  #   Interferometry  ```@ autodocs  Modules   =   [ JuMIT . Interferometry ]  Order     =   [ : module ,   : type ,   : function ]",
            "title": "FWI"
        },
        {
            "location": "/reference/#poisson",
            "text": "```@autodocs\nModules = [JuMIT.Poisson]\nOrder   = [:module, :type, :function]  #   Plots  ```@ autodocs  Modules   =   [ JuMIT . Plots ]  Order     =   [ : module ,   : type ,   : function ]",
            "title": "Poisson"
        },
        {
            "location": "/reference/#index",
            "text": "@index",
            "title": "Index"
        },
        {
            "location": "/modeling/page1/",
            "text": "```@meta\nEditURL = \"https://github.com/TRAVIS_REPO_SLUG/blob/master/\"\n\n\nload packages\n\n```@example page1\nusing JuMIT\nusing Statistics\nusing Plots\npyplot()\n\n\n\n\n\ncreate simple (almost) homogeneous acoustic model\n\n\n```@example page1\nmodel=J.Gallery.Seismic(:acou_homo1)\nJ.Models.Seismic_addon!(model, randn_perc=0.01)\n\n\na simple acquisition geometry\n\n```@example page1\nacqgeom = JuMIT.Gallery.Geom(model.mgrid,:xwell);\n\n\n\n\n\nplot the model and source, receivers\n\n\n```@example page1\np1=JP.seismic(model)\nJP.geom!(acqgeom)\nplot(p1)\n\n\ngenerate time grid\n\n```@example page1\ntgrid = range(0.0,stop=2.0,length=1000)\n\n\n\n\n\nRicker wavelet\n\n\n```@example page1\nwav = JuMIT.Utils.Wavelets.ricker(10.0, tgrid, tpeak=0.25,);\n\n\ndistribute the same source wavelet to all the supsersources\n\n```@example page1\nacqsrc=JuMIT.Acquisition.Src_fixed(acqgeom.nss,1,[:P],wav,tgrid);\n\n\n\n\n\ncreate \nFdtd.Param\n object to prepare forward modelling\n* npw corresponds to the number of independently propagating wavefields (1 in most cases)\n\n\n```@example page1\npa=JuMIT.Fdtd.Param(npw=1,model=model,\n    acqgeom=[acqgeom], acqsrc=[acqsrc],\n    sflags=[2], rflags=[1],\n    tgridmod=tgrid, verbose=true);\n\n\nOnce the `Param` object is created, do the modelling \"without any memory allocations\" using `mod!`\n\n```@example page1\n@time JuMIT.Fdtd.mod!(pa);\n\n\n\n\n\nplot a record after modelling\n\n\n```@example page1\npdata=plot(pa.c.data[1].d[1,1])\nplot(pdata)\n\n\ncreate new seismic model\n\n```@example page1\nmodel_new=J.Gallery.Seismic(:acou_homo1) # prepare another model\nJ.Models.Seismic_addon!(model_new, randn_perc=0.01)\nJ.Models.Seismic_addon!(model_new, constant_pert=0.03) # perturb the model\np2=JP.seismic(model_new) # plot new model\nJP.geom!(acqgeom)\nplot(p2)\n\n\n\n\n\nNow, we the change the model in the \nParam\n object without memory allocation\nThis routine can be used during FWI,\nwhere medium parameters are itertively updated in the same \nFdtd.Param\n object\n\n\n```@example page1\nJ.Fdtd.update_model!(pa.c, model_new)\n\n\nrun modelling now and plot data again\n\n```@example page1\n@time JuMIT.Fdtd.mod!(pa);\n\n\n\n\n\nplot a record after modelling\n\n\n@example page1\nplot!(pdata, pa.c.data[1].d[1,1])\nplot(pdata)\n\n\nThis page was generated using \nLiterate.jl\n.",
            "title": "Tutorials"
        }
    ]
}